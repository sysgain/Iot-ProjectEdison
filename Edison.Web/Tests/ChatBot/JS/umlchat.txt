@startuml
actor "Consumer" as act_consumer #yellow
participant "Consumer App" as app_consumer #yellow
participant "Chat Bot" as srv_chat #green
participant "API Service" as srv_api #green
participant "Workflow Service" as srv_workflows #green
participant "CosmosDB" as srv_db #cyan
participant "Web Portal Chat" as app_admin #yellow
actor "Administrator" as act_admin #yellow

== Initial connection ==
act_consumer -> app_consumer : Initialize Chat
app_consumer -> srv_api : Request token from <font color=purple>/api/chatsecurity</font>
note right: For consumers, could be skipped for non directline users, potentially.
srv_api -> app_consumer : Retrieve <font color=purple>bot token</font>, <font color=purple>streamurl</font>, <font color=purple>expiration date</font>, <font color=purple>user context</font>
app_consumer -> srv_chat : Initialize connection with chat, pass <font color=purple>b2c token</font> in <font color=purple>UserToken</font> property
srv_chat-> srv_chat: Decode <font color=purple>b2c token</font> and retrieve <font color=purple>user context</font>
srv_chat -> app_consumer : Retrieve log history of the conversation
note right: Direct Line only keep 24 hours, but it should be possible to manually log activities to retrieve them all.
app_consumer -> act_consumer : <font color=green>Consumer see history of conversation</font>

== Consumer - Send Report / Emergency message ==
act_consumer -> app_consumer : Send Report message
app_consumer -> srv_chat : Message sent to chat bot with properties <font color=purple>b2c token</font>, <font color=purple>reportType</font>
note right : Geolocation is sent periodically while a conversation is active (until terminate command is sent from either user or admin)
srv_chat -> srv_api : Chat Controller: Save activity in db
srv_api -> srv_db : Request Create / Update conversation in db, save activity
srv_db -> srv_api : Return Success / Error
srv_chat -> srv_workflows : Trigger new Event Processor Workflow (eventType report or emergency)
note right : No callback as this would significantly slow the chat. Not sent if geolocation is not provided
srv_chat -> app_admin : Message forwarded to admin conversation
app_admin -> act_admin : <font color=green>Administrators get notified</font>
srv_chat -> app_consumer : Send activity reply report successfully sent
app_consumer -> act_consumer : <font color=green>Consumer get notified</font>

== Admin - Send response to report / emergency ==
act_admin -> app_admin : Send Report message
app_admin -> srv_chat : Message sent to chat bot along with ChannelData Command <font color=purple>SendMessage {userid}</font>
note right : Discussion with Jarod needed
srv_chat -> srv_api : Chat Controller: Save activity in db
srv_api -> srv_db : Request Create / Update conversation in db, save activity
srv_db -> srv_api : Return Success / Error
srv_chat -> app_consumer: Send reply activity to consumer with {userId}
app_consumer -> act_consumer : <font color=green>Consumer gets notified</font>
app_admin -> act_admin : <font color=green>Admin gets notified</font>

== Terminate conversation Report / Emergency ==
act_admin -> app_admin : Request end of conversation
app_admin -> srv_chat : Send ChannelData Command <font color=purple>Terminate {userId}</font>
note right: Can also be sent from user?
srv_chat -> srv_api : Chat Controller Retrieve last open conversation
srv_api -> srv_db : Request last open conversation
srv_db -> srv_api : Retrieve last open conversation
srv_api -> srv_chat : Chat Controller Return Conversation
srv_chat -> srv_api : Chat Controller Request Termination Conversation
srv_api -> srv_db : Request Termination Conversation
srv_db -> srv_api : Return Success / Error
srv_api -> srv_chat : Return Success / Error
srv_chat -> app_consumer : Send confirmation
app_consumer -> act_consumer : <font color=green>Consumer gets notified</font>
srv_chat -> app_admin : Send confirmation
app_admin -> act_admin : <font color=green>Admin gets notified</font>
@enduml